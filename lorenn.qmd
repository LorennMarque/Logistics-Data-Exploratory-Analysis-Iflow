---
title: "loren"
format: html
editor: visual
---

```{r echo = FALSE}

# Librerías
library(dplyr)
library(ggplot2)
library(forecast)
library(ggplot2)
library(tseries)
library(lubridate)

# Cargar datos
df <- read.csv("iflow_clean.csv")
```

## 2. Segmentación y patrones de entregas.

1.  Identificar Entregas Recurrentes.

```{r echo = FALSE}
entregas_por_orden <- df %>%
  group_by(id_orden) %>%
  summarize(cant_entregas = n(),
            has_many = cant_entregas > 1,
            clientes_unicos = n_distinct(cliente))
```

```{r echo = FALSE}
# Crear el histograma
ggplot(entregas_por_orden, aes(x = cant_entregas)) +
  geom_histogram(binwidth = 2, fill = "#94C11F", color = "#272727") +
  labs(title = "Histograma de Entregas por domicilio", 
       x = "Valor", 
       y = "Cantidad de entregas") +
  theme_minimal()
```

```{r echo = FALSE}
# Calcular las frecuencias y porcentajes
frecuencias <- entregas_por_orden %>%
  count(has_many) %>%
  mutate(porcentaje = (n / sum(n)) * 100)

# Crear el gráfico de barras con porcentajes encima
ggplot(frecuencias, aes(x = has_many, y = n)) +
  geom_bar(stat = "identity", fill = "#94C11F", color = "#272727") +
  geom_text(aes(label = paste0(round(porcentaje, 1), "%")), 
            vjust = -0.5, size = 3) +  # Ajuste para que el texto aparezca encima
  labs(title = "Domicilios con más de una entrega", 
       x = "¿Tiene más de una entrega?", 
       y = "Cantidad de resultados") +
  theme_minimal()
```

2.  ¿Los domicilios reciben entregas de un único cliente o solo 20 o 70?

```{r echo = FALSE}
# 2. Filtrar las órdenes con más de una entrega
ordenes_multiples <- entregas_por_orden %>%
  filter(cant_entregas > 1)

# Mostrar cuántas órdenes tienen más de una entrega
cat("Total de órdenes con más de una entrega:", nrow(ordenes_multiples), "\n")
```

```{r echo = FALSE}
resumen_clientes <- ordenes_multiples %>%
  count(clientes_unicos)  # Contar cuántas órdenes tienen 1 o más clientes únicos

ggplot(resumen_clientes, aes(x = factor(clientes_unicos), y = n, fill = factor(clientes_unicos))) +
  geom_bar(stat = "identity", fill = "#94C11F", color = "#272727") +
  labs(title = "Distribución de Órdenes por Número de Clientes Únicos",
       x = "Número de Clientes Únicos en la Orden",
       y = "Cantidad de Órdenes") +
  theme_minimal() +
  theme(legend.position = "none")
```

### 2.1 Estacionalidad y temporalidad

1.  ¿Existen patrones estacionales en la demanda de entregas (meses con mayor/menor volumen)?

```{r echo = FALSE}
# 1. Filtrar valores faltantes en la columna 'fin_visita'
df_date <- df %>% filter(!is.na(fin_visita))

# 2. Convertir 'fin_visita' a fecha-hora y luego extraer solo la fecha
df_date$fin_visita <- as.POSIXct(df_date$fin_visita, format = "%Y-%m-%d %H:%M:%S")
df_date$fecha <- as.Date(df_date$fin_visita)  # Extraer la fecha sin horas

# 3. Agrupar las entregas por día
entregas_diarias <- df_date %>%
  group_by(fecha) %>%
  summarize(total_entregas = n())

# 4. Completar días faltantes con 0 entregas
rango_fechas <- seq(min(entregas_diarias$fecha), max(entregas_diarias$fecha), by = "day")

entregas_completas <- data.frame(fecha = rango_fechas) %>%
  left_join(entregas_diarias, by = "fecha") %>%
  mutate(total_entregas = ifelse(is.na(total_entregas), 0, total_entregas))

# 5. Crear la serie temporal diaria con frecuencia semanal (7 días)
entregas_ts <- ts(
  entregas_completas$total_entregas,
  start = c(year(min(entregas_completas$fecha)), yday(min(entregas_completas$fecha))),
  frequency = 7  # Frecuencia semanal
)

# 6. Descomponer la serie temporal usando STL
descomposicion_stl <- stl(entregas_ts, s.window = "periodic")

# 7. Graficar la descomposición STL
autoplot(descomposicion_stl) +
  ggtitle("Descomposición STL de la Serie de Tiempo Diaria")


```

#### 2. Descomposición de la Serie Temporal

Esto permitirá separar los componentes de tendencia, estacionalidad y ruido para identificar patrones.

```{r echo = FALSE}
# 8. Graficar la función de autocorrelación (ACF)
acf(entregas_ts, main = "Autocorrelación de Entregas Diarias")

```

### **Acciones Recomendadas**

```{r echo = FALSE}
# 1. Filtrar valores faltantes en `fin_visita`
df_date <- df_date %>% filter(!is.na(fin_visita))

# 2. Convertir 'fin_visita' a fecha (sin hora)
df_date$fecha <- as.Date(df_date$fin_visita)

# 3. Agrupar las entregas por fecha (por día)
entregas_diarias <- df_date %>%
  group_by(fecha) %>%
  summarise(total_entregas = n())

# 4. Agregar el día de la semana para análisis de patrones semanales
entregas_diarias <- entregas_diarias %>%
  mutate(dia_semana = weekdays(fecha))

# 5. Calcular el promedio de entregas por día de la semana
entregas_por_dia <- entregas_diarias %>%
  group_by(dia_semana) %>%
  summarise(promedio_entregas = mean(total_entregas)) %>%
  arrange(match(dia_semana, c("Monday", "Tuesday", "Wednesday", 
                              "Thursday", "Friday", "Saturday", "Sunday")))
```

1.  **Patrones Semanales:**

    -   Dado que la estacionalidad refleja un ciclo regular, verifica si los picos corresponden a ciertos días de la semana con mayor actividad.

```{r echo = FALSE}

# 1. Agrupar las entregas por fecha y extraer el día de la semana
df_date$fecha <- as.Date(df_date$fin_visita)
df_date$dow <- wday(df_date$fecha, label = TRUE, abbr = FALSE)  # Día de la semana

# Agrupar por día de la semana para encontrar los patrones
entregas_por_dia <- df_date %>%
  group_by(dow) %>%
  summarize(total_entregas = n()) %>%
  arrange(dow)

# Graficar las entregas por día de la semana
ggplot(entregas_por_dia, aes(x = dow, y = total_entregas)) +
  geom_bar(stat = "identity", fill = "#94C11F") +
  ggtitle("Entregas por Día de la Semana") +
  xlab("Día de la Semana") +
  ylab("Cantidad de Entregas")
```

1.  **Análisis de la Tendencia:**

    -   La tendencia sugiere una caída hacia el final del período. Podrías explorar las causas (por ejemplo, menos pedidos en ciertas semanas).

<!-- -->

1.  **Eventos Aleatorios:**

    -   Analiza los residuos para identificar si hay **eventos específicos** que no se explican por la tendencia o la estacionalidad (por ejemplo, días con una gran variación no esperada).

2.  **Pronósticos:**

    -   Si la tendencia y la estacionalidad son estables, puedes utilizar este modelo para hacer pronósticos de entregas en las próximas semanas.

### **Conclusión**

La descomposición STL muestra un **patrón claro de estacionalidad**, probablemente semanal, junto con una **tendencia** leve de variación. Esto te da una buena base para entender el comportamiento de las entregas y planificar estrategias operativas más eficientes. Si quieres ir más allá, podrías intentar hacer un **pronóstico** con modelos como `Holt-Winters` o un modelo `ETS`.

3.  ¿Qué días de la semana o meses tienen más visitas?

```{r echo = FALSE}
# Agrupar y contar la cantidad de entregas por cliente y día de la semana
entregas_por_cliente_dia <- df %>%
  filter(!is.na(dia_str) & dia_str != "domingo") %>%
  group_by(cliente, dia_str) %>%
  summarise(cantidad = n()) %>%
  ungroup() %>%
  mutate(dia_str = factor(dia_str, 
                          levels = c("lunes", "martes", "miércoles", 
                                     "jueves", "viernes", "sábado")))

# Line chart de cantidad de entregas por cliente y día de la semana
linechart_cliente_dia <- entregas_por_cliente_dia %>%
  ggplot(aes(x = dia_str, y = cantidad, color = factor(cliente), group = cliente)) +
  geom_line(size = 1) +
  geom_point(size = 3) +
  labs(title = "Cantidad de Entregas por Día de la Semana y Cliente",
       x = "Día de la Semana", y = "Cantidad de Entregas", color = "Cliente") +
  theme_minimal() +
  theme(legend.position = "bottom")

# Mostrar el gráfico
print(linechart_cliente_dia)
```

```{r echo = FALSE}
# Agrupar y contar las entregas por cliente, día y mes
entregas_por_cliente_tiempo <- df %>%
  group_by(cliente, dia, mes) %>%
  summarise(cantidad = n()) %>%
  ungroup() %>%
  mutate(fecha = as.Date(paste(mes, dia, sep = "-"), format = "%m-%d"))

# Line chart con la evolución de las entregas a lo largo del tiempo
linechart_cliente_tiempo <- entregas_por_cliente_tiempo %>%
  ggplot(aes(x = fecha, y = cantidad, color = factor(cliente), group = cliente)) +
  geom_line(size = 1) +
  geom_point(size = 2) +
  labs(title = "Evolución de Entregas por Cliente a lo Largo del Tiempo",
       x = "Fecha", y = "Cantidad de Entregas", color = "Cliente") +
  theme_minimal() +
  theme(legend.position = "bottom")

# Mostrar el gráfico
print(linechart_cliente_tiempo)
```
